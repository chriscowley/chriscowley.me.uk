<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Just Another Linux Blog]]></title>
  <link href="http://www.chriscowley.me.uk/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.chriscowley.me.uk/"/>
  <updated>2013-08-01T11:38:38+02:00</updated>
  <id>http://www.chriscowley.me.uk/</id>
  <author>
    <name><![CDATA[Chris Cowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Connect to Fedora 19 with FreeNX]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/08/01/connect-to-fedora-19-with-freenx/"/>
    <updated>2013-08-01T10:17:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/08/01/connect-to-fedora-19-with-freenx</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/Z8LFhPUl.png" width="200" height="150"> FreeNX is a great remote desktop protocol. I find it more responsive than VNC and it uses less bandwidth. The biggest advantage though (in my eyes) is that it uses SSH to do the authentication. With VNC, each user has to arrange another password to connect to their VNC session.</p>

<!-- more -->


<p>However, FreeNX is still not really working nicely with GNOME 3. If you use KDE you are fine, but I like GNOME and many of the programs are GTK as a result. This means that they look out of place on KDE, which causes my engineer OCD super-sensory powers to go mad.</p>

<p>My workaround is to effectively go back to the tried and tested Gnome 2 environment, nowadays know as MATE.</p>

<p>Get the server installed and configured along with the MATE desktop:</p>

<p><code>
sudo yum -y groupinstall "MATE desktop"
sudo yum -y install freenx-server
sudo /usr/libexec/nx/nxsetup --install --setup-nomachine-key
sudo chkconfig freenx-server on
</code></p>

<p>Now open <code>/etc/nxserver/node.conf</code> and un-comment the line that sets the <code>COMMAND_START_GNOME</code> variable. You need to edit this line to read:</p>

<p><code>
COMMAND_START_GNOME=mate-session
</code></p>

<p>and restart the server with <code>sudo service freenx-server restart</code></p>

<p>Now connect to it using the NX client and chose to use a unix-gnome desktop. Instead of firing up <code>gnome-session</code> (which will fail) it will now run <code>mate-session</code> and you are happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bamboo Invoice on Centos with Nginx]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/04/29/bamboo-invoice-on-centos-with-nginx/"/>
    <updated>2013-04-29T21:16:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/04/29/bamboo-invoice-on-centos-with-nginx</id>
    <content type="html"><![CDATA[<p>BambooInvoice is free Open Source invoicing software intended for small businesses and independent contractors. It is easy to use and creates pretty good looking invoices.</p>

<!-- more -->


<p>It is a simple PHP application that is based on the CodeIgniter framework. This means it is really simple to install on a typically LAMP stack. I however use Nginx and could not find any notes on how to configure it. It is pretty typical you can get most of the way by reading any of the Nginx howto documents on the web. Personally, for PHP apps, I use PHP-FPM, so you could use <a href="http://www.howtoforge.com/installing-nginx-with-php5-and-php-fpm-and-mysql-support-on-centos-6.4">this on Howtoforge</a> to get most of the way. That will get you a working Nginx, PHP and MySQL system.</p>

<p>Download the install file from [http://bambooinvoice.org/] an unzip is in your www folder:</p>

<p><code>bash
cd /var/www
wget http://bambooinvoice.org/img/bambooinvoice_089.zip
unzip bambooinvoice_089.zip
</code></p>

<p>You next step is to create a database for it along with a user:</p>

<p><code>mysql
CREATE DATABASE bambooinvoice DEFAULT CHARACTER SET utf8;
GRANT ALL ON bambooinvoice.* TO 'bambooinvoice'@'localhost' IDENTIFIED BY 'bambooinvoice';
FLUSH PRIVILEGES;
exit
</code></p>

<p>Now you can edit the config files to point at the database:</p>

<p>```php /var/www/bambooinvoices/bamboo_system_files/application/config/database.php
&lt;?php  if (!defined('BASEPATH')) exit('No direct script access allowed');
$active_group = 'default';</p>

<p>$db['default']['hostname'] = 'localhost';
$db['default']['username'] = 'bambooinvoice';
$db['default']['password'] = 'bambooinvoice';
$db['default']['database'] = 'bambooinvoice';
$db['default']['dbdriver'] = 'mysql';
$db['default']['dbprefix'] = 'bamboo_';
$db['default']['active_r'] = TRUE;
$db['default']['pconnect'] = FALSE;
$db['default']['db_debug'] = TRUE;
$db['default']['cache_on'] = FALSE;
$db['default']['cachedir'] = '';
$db['default']['char_set'] = 'utf8';
$db['default']['dbcollat'] = 'utf8_general_ci';
?>
```</p>

<p>Next you need set the base_url in <code>/var/www/bambooinvoices/bamboo_system_files/application/config/config.php</code>. Nothing else is essential in that file, but read the docs in the ZIP file to see what else you want to change.</p>

<p>Now the all important bit.</p>

<p>```nginx /etc/nginx/conf.d/bamboo.conf
server {</p>

<pre><code>listen 80;
server_name bamboo.example;
root /var/www/bambooinvoice/;
index index.php index.html;
access_log              /var/log/nginx/bamboo_access.log;
error_log               /var/log/nginx/bamboo_error.log;

location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
}


# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
 }
 location / {
     try_files $uri $uri/ /index.php$request_uri /index.php;
 }


 location ~ \.php($|/) {
     try_files $uri =404;
     fastcgi_pass 127.0.0.1:9000;
     include /etc/nginx/fastcgi_params;
     fastcgi_index index.php;
     set $script $uri;
     set $path_info "";
     if ($uri ~ "^(.+\.php)(/.+)") {
         set $script $1;
         set $path_info $2;
     }
     fastcgi_param URI $uri;
     # Next two lines are fix the 502 (Bad gateway) error
     fastcgi_buffers 8 16k;
     fastcgi_buffer_size 32k;

     fastcgi_param PATH_INFO $path_info;
     fastcgi_param SCRIPT_NAME $script;
     fastcgi_param SCRIPT_FILENAME $document_root$script;
  }
</code></pre>

<p>}
```</p>

<p>At first glance, there is nothing out of the ordinary. This is pretty much what Howtoforge gives you. Look more closely and I have added the 3 lines 39-41. This solves a gateway problem I had when creating a client.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writeable TFTP Server On CentOS]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/03/25/writeable-tftp-server-on-centos/"/>
    <updated>2013-03-25T15:45:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/03/25/writeable-tftp-server-on-centos</id>
    <content type="html"><![CDATA[<p>Well this caught me out for an embarassingly long time. There are <a href="http://blog.penumbra.be/tag/tftp/">loads</a> <a href="http://www.question-defense.com/2008/11/13/linux-setup-tftp-server-on-centos">of</a> <a href="http://wiki.centos.org/EdHeron/PXESetup">examples</a> of setting up a TFTP server on the web. The vast majority of them assume that you are using them read-only for PXE booting.</p>

<!-- more -->


<p>I needed to make it writeable so that it could be used for storing switch/router backups. It is trivially simple once you have read the man page (pro tip: RTFM).</p>

<p>I am doing this on RHEL6, it should be fine on Centos, Scientific Linux or Fedora as is. Any other distro it will require some modification. First install it (install the client as well to test at the end:</p>

<p><code>
yum install tftp tftp-server xinetd
chkconfig xinetd on
</code></p>

<p>Now edit the file `/etc/xinetd.d/tftp to read:</p>

<p>```
service tftp
{</p>

<pre><code>socket_type = dgram
protocol    = udp
wait        = yes
user        = root
server      = /usr/sbin/in.tftpd
server_args = -c -s /var/lib/tftpboot
disable     = no
per_source  = 11
cps         = 100 2
flags       = IPv4
</code></pre>

<p>}
```</p>

<p>There are 2 changes to this file from the defaults. The <code>disable</code> line enables the service. Normally that is where you leave it. However, you cannot upload to the server in this case without pre-creating the files.</p>

<p>The second change adds a <code>-c</code> flag to the <code>server_args</code> line. This tells the service to create the files as necessary.</p>

<p>It still will not work though. You need to tweak the filesystem permissions and SELinux:</p>

<p><code>
chmod 777 /var/lib/tftpboot
setsebool -P tftp_anon_write 1
</code></p>

<p>Of course you'll also need to open up the firewall. So add the following line to <code>/etc/sysconfig/iptables</code>:</p>

<p><code>
-A INPUT -m state --state NEW -m udp -p udp -m udp --dport 69 -j ACCEPT
</code></p>

<p>If your IPtables set up is what comes out of the box, there will be a similar line to allow SSH access (tcp:22), I would add this line just after that one. If you have something more complicated, then you will probably know how to add this one as well anyway.</p>

<p>You should now be able to upload something to the server</p>

<p><code>
echo "stuff" &gt; test
tftp localhost -c put test
</code></p>

<p>Your test file should now be in <code>var/lib/tftpboot</code>.</p>

<p>One final note with regards to VMware. This does not work if you are using the VMXNET3 adapter, so make sure you are using the E1000. GETs will work and the file will be created, but no data will be put on the server. To annoy you even more, the test PUTting to localhost will work, but PUTs from a remote host will not.</p>

<p>It has been noted in the VMware forums <a href="http://communities.vmware.com/thread/215456">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In praise of old school UNIX]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix/"/>
    <updated>2013-02-05T16:13:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix</id>
    <content type="html"><![CDATA[<p>What am I doing today? Documentation that is what. I am writing a document on how to do <a href="http://www.chriscowley.me.uk/blog/2012/11/19/sftp-chroot-on-centos/">this</a>. To any Linux user it is a very simple process and I could just give them a link to my own website.</p>

<!--more-->


<p>I am not writing this for a techinical audience though. The people who are going to perform this work will be the 'Level 1 operatives'. This translates roughly to "anyone we can find on the street corners of some Far East city". If I tell them to press the red button labelled "press me" and it turns out to be orange, they will stop. I cannot assume the ability to edit a file in Vi. How can you work around this, well you need to make everything a copy and paste operation. This is easily done in Bash thanks to IO redirection and of course Sed.</p>

<p>Now, a brief recap may be in order, as there are some perfectly knowledgable Linux users who do not know what Sed is. Really, one of them sits behind me. Sed stands for Stream EDitor, and it parses text and applies transformations to it. It was one of the first UNIX utilities. It kind of sits between <a href="https://en.wikipedia.org/wiki/Grep">Grep</a> and <a href="https://en.wikipedia.org/wiki/AWK_programming_language">Awk</a> and is <a href="http://uuner.doslash.org/forfun/">surprisingly powerful</a>.</p>

<p>Anyway, I need to edit a line in a file then add a block of code at the end.</p>

<p>```
cp -v /etc/ssh/sshd_config{,.dist}
sed -i ''/<sup>Subsystem/s#/usr/libexec/openssh/sftp-server#internal-sftp#g'</sup> \</p>

<pre><code>/etc/ssh/sshd_config
</code></pre>

<p>```</p>

<p>First line obviously is a contracted cp line which puts the suffix <em>.dist</em> on the copy.</p>

<p>The basic idea is that it runs through the file (/etc/ssh/sshd_config) and looks for any line that starts with "Subsystem" (<code>/^Subsystem/</code>). If it finds a line that matches it then will perform a "substituion" (<code>/s#</code>). The next 2 blocks tell it what the substitution will be in the order "#From#To#". The reason for  the change from <code>/</code> to <code>#</code> is because of the / in the path name (thanks to <a href="http://www.reddit.com/user/z0nk">Z0nk</a>  for reminding me that you can use arbitary seperators). The "#g" tells Sed to perform the substituion on every instance it finds on the line, rather than just the first one. It is completely superfluous in this example, but I tend to put it in from force of habit. Finally the "-i" tells Sed to perform the edit in place, rather than outputing to Stdout.</p>

<p>The next bit is a bit cleverer. With a single command I want to add a block of text to the file.</p>

<p>```
cat &lt;<EOF | while read inrec; do echo $inrec >> /etc/ssh/sshd_config; done
Match Group transfer
ChrootDirectory /var/local/
ForceCommmand internal-sftp
X11Forwarding no
AllowTcpForwarding no</p>

<p>EOF
```</p>

<p>Here <code>cat &lt;&lt;EOF</code> tells it send everything you type to Stdout until it sees the string EOF. This then gets piped to a <code>while</code> loop that appends each line of that Stdout to the file we want to extend (<em>/etc/ssh/sshd_config</em> in this case).</p>

<p>Using these old tools and a bit of knowledge of how redirection works has enabled me to make a document that anyone who can copy/paste can follow. It is very easy for technical people to forget that not everyone has the knowledge we have. To us opening Vi is perfectly obvious, but to others maybe it isn't and they are not being paid enough to know. They are just being paid to follow a script. I may not like it, but it is the case - it also helped turn a boring documentation session into something a little more interesting. Which is nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trac with Nginx on Centos]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/01/21/trac-with-nginx-on-centos/"/>
    <updated>2013-01-21T11:53:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/01/21/trac-with-nginx-on-centos</id>
    <content type="html"><![CDATA[<p><a href="tac.edgewall.org">Trac</a> is an excellent online project management tool. Nginx us a great web server. Surely the combination of the two should be a match made in heaven. I would say so, although there are a couple problems. The easiest way to deploy Trac is on Apache using mod_wsgi or FastCGI. This option does not really exist for Nginx. Okay, it can do FastCGI, but I have not get that set up on my server.</p>

<!-- more -->


<p>What Nginx does do extremely well is Proxy stuff. Use this with Trac's built in web server (tracd) and you have  a very nice little set up. Ruby people, before you get all upset, Trac's server is not just for dev (a la WEBrick). It is fine for production use.</p>

<p>The first thing to do (obviously) is to install Trac. I get it from Pip, although a slightly older version is in <a href="http://fedoraproject.org/wiki/EPEL">EPEL</a> if you prefer to stick with native packages.</p>

<p><code>
sudo yum install python-setuptools
sudo pip install Trac
sudo useradd -r -d /var/local/trac trac
sudo -u trac trac-admin /var/local/trac/trac.example.com initenv
sudo -u trac htpasswd -c /var/local/trac/.htpasswd example-realm chris
</code></p>

<p>Answer the little question it asks you - this includes the VCS you want to use, but that is for another day. I use the TracGit plugin to link to my Git repos.</p>

<p>Create an init script (<code>/etc/init.d/trac</code>) that contains something like:</p>

<p><div><script src='https://gist.github.com/4586539.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Start up the Trac daemon and enable it on boot up</p>

<p><code>
sudo chmod +x /etc/init.d/trac
sudo chkconfig trac on
sudo /etc/init.d/trac start
</code></p>

<p>Open it up and have a look at least. You will probably want to modify it to use your authentication realm.</p>

<p>Now you need to configure Nginx. I use the package from <a href="http://fedoraproject.org/wiki/EPEL">EPEL</a>. Enable that if you have not already and run</p>

<p><code>
sudo yum install nginx
</code></p>

<p>Create the file <code>/etc/nginx/conf.d/trac.conf</code> containing something like:</p>

<p><div><script src='https://gist.github.com/4586630.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Finally enable Nginx on boot up and start it:</p>

<p><code>
sudo chkconfig nginx on
sudo server nginx start
</code></p>
]]></content>
  </entry>
  
</feed>
