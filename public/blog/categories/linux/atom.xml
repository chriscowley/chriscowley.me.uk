<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Just Another Linux Blog]]></title>
  <link href="http://www.chriscowley.me.uk/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.chriscowley.me.uk/"/>
  <updated>2014-09-19T21:57:48+02:00</updated>
  <id>http://www.chriscowley.me.uk/</id>
  <author>
    <name><![CDATA[Chris Cowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Source Hyper-converged Infrastructure]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2014/09/19/open-source-hyper-converged-infrastructure/"/>
    <updated>2014-09-19T21:18:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2014/09/19/open-source-hyper-converged-infrastructure</id>
    <content type="html"><![CDATA[<p>Hyper-converged seems to be all the rage at the moment. VMware's announcement of the <a href="http://www.vmware.com/products/evorail/">EVO:RAIL</a> has naturally got lots of tongues wagging. They are jumping into a market already well populated.</p>

<!-- more -->


<p>I was looking at the pricing/features and though it all looks a little expensive. Nutanix for example, will sell you the following:</p>

<ul>
<li>NX-1000: $80k+ (4 little nodes)</li>
<li>NX-3000: $144k+ (4 big nodes)</li>
<li>NX-6000: $120k+ (2 massive nodes)</li>
</ul>


<p>I'd imagine that, once you include licensing, EVO:RAIL systems will come in similar. What do you get for your case:</p>

<ul>
<li>A COTS server (dual E5-26x0 Xeon, 64GB+ RAM)</li>
<li>Networking (at least 2x 1Gb, but most are 10Gb)</li>
<li>A few TB Storage</li>
<li>Tend to rely on the customer to supply the network infrastructure, but I see no real problem with that. If I had all HP Procurves in my DC, I would pretty annoyed if I suddenly had a pair of Cisco's to worry about</li>
<li>The while system is built on top of architectually identical building blocks</li>
</ul>


<p>That last one does not necessarily mean that all the boxes are the same. It means there is no concept of a "storage node" or a "compute node". You just have "nodes" that all contain compute, storage, networking, whatever. You may have some that are bigger than others, but they all do the same job.</p>

<p>On top of that, you get some software special sauce to tie it all together. For EVO::RAIL, that looks something like this:</p>

<p><img src="http://wahlnetwork.com/wn/wp-content/uploads/2014/08/configure-options-650x335.png" alt="EVO:RAIL install" /></p>

<p>and this:</p>

<p><img src="http://wahlnetwork.com/wn/wp-content/uploads/2014/08/configure-complete-650x330.png" alt="EVO:RAIL install finished" /></p>

<p><a href="http://youtu.be/XOhZgAPn_CU">Which is nice</a></p>

<p>I decided to play a little game, a bit like when you want to buy a new computer: you go online, put together all the parts you want in a basket, look at, dream a little. After a few rounds of this you start justifying it to yourself, then you wife/accountant. Eventually, you build one final basket pull out the credit card an pull the trigger. Well, this is like that, but more expensive.</p>

<p>I think that we now have everything we need in the FLOSS world to impliment a Hyper-converged architecture. I suppose this is my attempt to document that as a some sort of reference architecture. A key component will be Openstack, but not necessarily everywhere.</p>

<h1>Hardware</h1>

<p><img class="right" src="http://www.supermicro.com.tw/a_images/products/superserver/2U/SYS-2027PR-HTR_25.jpg">The easy bit is the CPU and RAM: plenty (at least 6 cores with 64GB of RAM). Networking, surprisingly is also relatively simple. Anything will do (2x 1Gb will be fine an entry level node), but 2x 10Gb is preferable, Infiniband would also be great (Linux works beautifully with Infiniband). All this would (ideally) be put into a box that has <a href="http://www.supermicro.com.tw/products/system/2U/2028/SYS-2028TP-HTR.cfm">multiple nodes in one box</a>.</p>

<p>Storage is more complex. Tiering is essential, and I personally am not a fan of hardware RAID. Additionally, this needs to be replicated. The overall architecture would look something like:</p>

<p><img src="https://docs.google.com/drawings/d/1sTBdhIGMvYiKkELaaO_TXQl8Em3vR8untQvLg4uSj30/pub?w=948&amp;h=460" alt="Cluster overview" /></p>

<p>Each node would have to at least an SSD, plus a decent number of spinny disks to get a sensible capacity. The spinners have no need for RAID - data protection is done on a cluster level higher up the stack. I think right now, I would probably run with Gluster, for reasons which I will revisit later. Ceph is probably where is till be at in the future though.</p>

<p>A good rule of thumb when using tiering is that your SSD should be roughly 10% of your spinning rust. So lets say a single 400-500GB SSD, along side 5TB of spinning disk.</p>

<p>For the clustering, you would need at least 2x 1Gb NICs dedicated to this. If one could dedicate a pair of 10Gb NICs then that would be awesome.</p>

<p>Finally, the OS needs to be installed on something, but a USB key or SD card is more than sufficient for that.</p>

<p>The complex bit is the initial configuration. What really makes the likes of Nutanix and EVO:RAIL stand out is the simplicity of install. The images above our the 4 steps it takes to get an EVO:RAIL cluster running and I have to admit it pretty darn good.</p>

<h1>Software</h1>

<p>What we need to aim at is that you:</p>

<ol>
<li>download an image</li>
<li>burn on to USB keys/SD cards</li>
<li>boot all the nodes</li>
<li>it works!</li>
</ol>


<p>I think all the parts to auto-configure a cluster exist in the FOSS world. The problem is making it 100% plug and play. I would say that this is finally a genuine use for IPv6 and mDNS. Let's dedicate a pair of 1Gb/s NICs to cluster communications and do all that over IPv6.</p>

<p>This enables to get a fully working network going with no intervention from the user. Now we can have a Config Management system running over said network. If we use Puppet, then our secret sauce can be used as an ENC to configure all the nodes.</p>

<p>What this means is that amount of new code that needs to be written is relatively small. All we need is that initial configuration utility. To make it super simple, this could even be in "the cloud" and each cluster registers itself with a UUID. I suppose this would work in much the same way as <code>etcd</code>. I suppose this interface could also be where the user downloads their image files, thus the UUID could be part of said image. Make all that FLOSS, and people can host their own management portal if they prefer. It would function in much the same way as RHN/Satellite.</p>

<p>Anyway, once that is all done, Puppet can then go and do all the necessary configuration. There is quite a bit of integration that needs to happen here.</p>

<p>There are 2 obvious choices for the virtualisation layer:</p>

<ul>
<li>oVirt</li>
<li>Openstack</li>
</ul>


<p>These are necessarily mutually exclusive. The oVirt team are build in support for various Openstack technologies:</p>

<ul>
<li>Neutron for networking</li>
<li>Cinder for block storage</li>
<li>Glance for template storage</li>
</ul>


<p>Different hosts could be tagged as either oVirt or Nova nodes depending on the type of app they are running. They all then share the same pool of storage.</p>

<p>The configuration would then be dealt with using Puppet roles.</p>

<p>When you need to add a new appliance, you just download an image with the correct UUID and it will add itself to the cluster.</p>

<h1>The bottom line</h1>

<p>Of course, the important bit is the price. This is very much back of envelope, but something like a Supermicro quad-node, where each node consists of:</p>

<ul>
<li>1x Xeon E5-2620V2 (6C, HT 2.1GHz)</li>
<li>64GB RAM</li>
<li>1x 240GB SSD</li>
<li>2x 1TB 10k SATA</li>
<li>4x 1Gb NIC</li>
</ul>


<p>comes to ~£8500. This compares pretty well with a Nutanix NX-1000, for 10% of the price.</p>

<p>Something comparable to a the NX-3000 would again be 4 nodes, each consisting of:</p>

<ul>
<li>2x Xeon E5-2620V2 (6C, HT 2.1GHz)</li>
<li>128GB RAM</li>
<li>1x 480GB SSD</li>
<li>4x 1TB 10k SATA</li>
<li>4x 1Gb NIC</li>
<li>4x 10Gb NIC</li>
</ul>


<p>would come to ~£15000. Again, this is 10% of the the price of the commercial solution.</p>

<p>These are 90% markups! <strong>90%!!!</strong> Even when you add in the vSphere licensing, that is still 70%. I have not seen any prices for any of the EVO::RAIL vendors, but I do not see that it will be much different. Why should it be?</p>

<p>Yes they are supported, but that is a lot to pay. I do not mean to pick on Nutanix, they make a fantastic product - one that I have proposed to customers on multiple occasions. The only reason I have used them is because it is relatively easy to find pricing.</p>

<p>Is this a statement of intent? I do not know. For now I do not have the time to run with this, but that does not mean I will not find the time. It does give a good reference architecture that will work for 95% of use cases with the above mentioned virtualisation/cloud platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Pythony Puppet Ruby vim IDE]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2014/09/13/my-pythony-puppet-ruby-ide/"/>
    <updated>2014-09-13T22:03:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2014/09/13/my-pythony-puppet-ruby-ide</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/0k24Ambl.png" width="400" height="400">Despite my penchant for tools written in Ruby (Puppet, Gitlab, Jekyll/Octopress etc) I do not actually like Ruby. I am more of a Python guy. I also like Vim, so whenever I use a GUI IDE I end up with something littered with <code>:w</code> and <code>ZZ</code>.</p>

<!-- more -->


<p>Despite my pythonic leanings, I also need something that can handle Ruby and Puppet's DSL. To which end, this is a bit of a mixture. Fortunately, nothing in either world really contradicts the other, so it works pretty nicely.</p>

<p>First, the basic environments. Git is needed everywhere, plus I need to isolate the environments of the various projects.</p>

<p><code>
sudo apt install git python python-dev python-virtualenv virtualenvwrapper curl libxml2-dev libxslt-dev zlib1g-dev ruby-dev
echo "pip install pyflakes" &gt;&gt; ~/.virtualenvs/postmkvirtualenv
curl -sSL https://get.rvm.io | bash -s stable --ruby
</code></p>

<p>Now we have Git, Virtualenv (and virtualenvwrapper) and RVM installed.</p>

<h1>Vim</h1>

<p>This the core of everything. I use quite a few plugins:</p>

<ul>
<li><a href="https://github.com/andrewle/vim-autoclose">Autoclose</a>: Inserts matching bracket, paren, brace or quote</li>
<li><a href="https://github.com/vim-scripts/Colour-Sampler-Pack">Colour Sampler Pack</a>: Gives me a nice colour scheme</li>
<li><a href="https://github.com/sjl/gundo.vim">Gundo</a>: Visualise the undo tree</li>
<li><a href="https://github.com/sjbach/lusty">Lusty</a>: Manage files within Vim</li>
<li><a href="https://github.com/cburroughs/pep8">PEP-8</a>: Validate the style of Python files</li>
<li><a href="https://github.com/vim-scripts/pydoc.vim">PyDoc</a>: Python documentation view- and search-tool (uses pydoc)</li>
<li><a href="https://github.com/tpope/vim-pathogen">Pathogen</a>: Plugin Manager</li>
<li><a href="https://github.com/vim-scripts/ScrollColors">Scroll Colours</a>: Colorsheme Scroller, Chooser, and Browser</li>
<li><a href="https://github.com/ervandew/supertab">Supertab</a>: Tab completion</li>
<li><a href="https://github.com/jmcantrell/vim-virtualenv">VirtualEnv</a>: Works with Virtualenvs</li>
<li><a href="https://github.com/rodjek/vim-puppet">Vim Puppet</a>: Puppet niceties</li>
<li><a href="https://github.com/godlygeek/tabular">Tabular</a>: Text filtering and alignment</li>
<li><a href="https://github.com/hallison/vim-markdown">Markdown</a>: Markdown syntax highlighter with snippets support</li>
</ul>


<p>I keep all this under Git control (available <a href="http://gitlab.chriscowley.me.uk/chriscowleyunix/vim-configuration">here</a>). You can just clone my repo and create a symlink for your <code>.vimrc</code>. If you would rather see what you are doing, then you can replicate my set up like this:</p>

<p><code>
mkdir -p ${HOME}/.vim/{autoload,bundle}
cd ${HOME}/.vim/
git init
git submodule add https://github.com/andrewle/vim-autoclose.git bundle/vim-autoclose
git submodule add https://github.com/vim-scripts/Colour-Sampler-Pack.git bundle/colour-sampler-pack
git submodule add https://github.com/sjl/gundo.vim.git bundle/gundo
git submodule add https://github.com/sjbach/lusty.git bundle/lusty
git submodule add https://github.com/cburroughs/pep8.git bundle/pep8
git submodule add https://github.com/vim-scripts/pydoc.vim.git bundle/pydoc
git submodule add https://github.com/tpope/vim-pathogen.git bundle/pathogen
git submodule add https://github.com/vim-scripts/ScrollColors.git bundle/scrollColors
git submodule add https://github.com/ervandew/supertab.git bundle/supertab
git submodule add https://github.com/jmcantrell/vim-virtualenv.git bundle/vim-virtualenv
git submodule add https://github.com/rodjek/vim-puppet.git bundle/puppet
git submodule add https://github.com/godlygeek/tabular.git bundle/tabular
git submodule add https://github.com/hallison/vim-markdown.git bundle/markdown
git submodule init
git submodule update
git submodule foreach git submodule init
git submodule foreach git submodule update
ln -s ../bundle/pathogen/autoload/pathogen.vim autoload/pathogen.vim
mv $HOME/.vimrc .
ln -s '$HOME/.vim/.vimrc' $HOME/.vimrc
</code></p>

<p>Add the following to your <code>.vimrc</code>:</p>

<p>```
" pathogen
let g:pathogen_disabled = [ 'pathogen' ]    " don't load self
call pathogen#infect()                      " load everyhting else
call pathogen#helptags()                    " load plugin help files</p>

<p>" code folding
set foldmethod=indent
set foldlevel=2
set foldnestmax=4</p>

<p>" indentation
set autoindent
set softtabstop=4 shiftwidth=4 expandtab</p>

<p>" visual
highlight Normal ctermbg=black
set background=dark
set cursorline
set t_Co=256</p>

<p>" syntax highlighting
syntax on
filetype on                 " enables filetype detection
filetype plugin indent on   " enables filetype specific plugins</p>

<p>" colorpack
colorscheme vibrantink</p>

<p>" gundo
nnoremap <F5> :GundoToggle<CR></p>

<p>" lusty
set hidden
let g:LustyJugglerSuppressRubyWarning = 1"</p>

<p>" pep8
let g:pep8_map='<leader>8'</p>

<p>" supertab
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview
```</p>

<p>There's quite a lot going on there. Refer to the various plugin docs linked above to find what it all does. This would be a good moment to commit all that.</p>

<p><code>
git add .
git commit -m "Initial commit"
</code></p>

<h1>Tmux</h1>

<p>I use this so I can have a single console window, with multiple panes. Tmux is configured with the file <code>$HOME/.tmux.conf</code>, mine contains:</p>

<p>```
set-window-option -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
unbind -n C-b
set -g prefix C-a</p>

<h1>easy-to-remember split pane commands</h1>

<p>bind h split-window -h
bind v split-window -v
unbind '"'
unbind %</p>

<p>bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
set-window-option -g window-status-current-bg yellow</p>

<h1>Just click it</h1>

<p>set-option -g mouse-select-pane on
set-option -g mouse-select-window on
set-option -g mouse-resize-pane on</p>

<h1>Scroll your way into copy mode (scrollback buffer)</h1>

<h1>and select text for copying with the mouse</h1>

<p>setw -g mode-mouse on</p>

<p>set -g set-titles on
set -g set-titles-string "#T"
```</p>

<p>Now I can use <code>Ctrl+a</code> instead of <code>Ctrl+b</code>. You may not need to do this, but I have little hands.I also change the kes for splitting  my windows (<em>'h'</em> horizontally, <em>v</em> vertically).
I make a few changes from the defaults:</p>

<ul>
<li><code>Ctrl+a</code> instead of <code>Ctrl+b</code> is my prefix. This matches <code>screen</code>, plusI  am more comfortable as I have small hands.</li>
<li>I can move around panes with either <code>vi</code> keys, arrows or just with the mouse.</li>
<li>I change the keys to split windows to <code>h</code> (horizontal) and <code>v</code> (vertical).</li>
</ul>


<p>This all works pretty well for me, although not perfectly. At the moment my clipboard gets intercepted by Tmux,which is top of my my list to fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Microsoft TrueType fonts on Fedora]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2014/07/28/install-microsoft-truetype-fonts-on-fedora/"/>
    <updated>2014-07-28T11:01:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2014/07/28/install-microsoft-truetype-fonts-on-fedora</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/IVNu1pf.png"> Fedora do nogt bundle Microsoft's core Truetype fonts for licensing reasons. Normallly I do not care, personally I prefer <a href="https://fedorahosted.org/liberation-fonts/">Liberation fonts</a> anyway. However, today I needed to Verdana.</p>

<!-- more -->


<p>Traditionally, the way to install these on RPM based distributions has been:</p>

<ol>
<li>Grab the RPM spec file</li>
<li>Build an RPM from the spec file</li>
<li>Install RPM using the <code>rpm</code> command.</li>
</ol>


<p>All well and good, however there are a couple of problems.</p>

<ul>
<li>Using RPM directly is frowned upon</li>
</ul>


<p>Nowadays, Yum does various bits of house keeping in addition to RPM, so this can lead to the <code>rpm</code> and <code>yum</code> databases getting their knickers in a twist.</p>

<p>I get around this with a simple piece of <code>sed</code>/<code>grep</code>:</p>

<p><code>
curl http://corefonts.sourceforge.net/msttcorefonts-2.0-1.spec | grep -v 'Prereq: /usr/sbin/chkfontpath' &gt; msttcorefonts-2.0-1.spec
</code></p>

<p>Now you can do all the usual stuff:</p>

<p><code>
rpmbuild -ba msttcorefonts-2.0-1.spec
yum --nogpgcheck ~/rpmbuild/RPMS/noarch/msttcorefonts-2.0-1.noarch.rpm
</code></p>

<p>Relogin and you will have access to Microsoft's fonts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Linux Active Directory Integration]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2014/06/17/new-linux-active-directory-integration/"/>
    <updated>2014-06-17T10:28:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2014/06/17/new-linux-active-directory-integration</id>
    <content type="html"><![CDATA[<p>This used to be quite complex, but now is astoundingly simple. Now there is a new project call <a href="http://freedesktop.org/software/realmd/">realmd</a>. It is in recent version of Debian (Jessie and Sid) and Ubuntu (since 13.04). For Red Hat types, it is RHEL7 and Fedora (since 18).</p>

<!-- more -->


<p>If you're on Debian/Ubuntu, install with:</p>

<p><code>
apt-get install realmd
</code></p>

<p>For RHEL/Fedora:</p>

<p><code>
sudo yum install realmd
</code></p>

<p>Now you can go ahead and join the domain:</p>

<p><code>
sudo realm join --user=&lt;admin-user&gt; example.com
</code></p>

<p>That is it, you can check this by running <code>sudo realm list</code>, which will give you something like:</p>

<p><code>
example.com
  type: kerberos
  realm-name: EXAMPLE.COM
  domain-name: example.com
  configured: kerberos-member
  server-software: active-directory
  client-software: sssd
  required-package: oddjob
  required-package: oddjob-mkhomedir
  required-package: sssd
  required-package: adcli
  required-package: samba-common
  login-formats: %U@example.com
  login-policy: allow-realm-logins
</code></p>

<p>The last step is <code>sudo</code>. If you want to have everyone in <em>Domain Admins</em> have permission to run everything as root, then add the following to <code>sudoers</code>:</p>

<p><code>
%domain\ admins@example.com ALL=(ALL)       ALL
</code></p>

<p>By default <code>realmd</code> used SSSD to perform the authentication. This in turn configures Kerberos and LDAP.</p>

<p>My initial testing has been performed with an Active Directory that has "Identity Managment for UNIX" installed. However, I forgot to actually enable my user for UNIX. Even so, it worked perfectly. It sees my Windows groups and defines a home directory of <code>/home/example.com/&lt;username&gt;</code>. I am pretty certain that you do not need to extend AD, it should work out of the box from what I can see.</p>

<p>As a bonus, it seems to respect nested groups, something that has always been a bug bear in these things.</p>

<h2>Edit (18/6/2014)</h2>

<p>It has been bought to my attention that there is dependency problems in Ubuntu 14.04. The <a href="http://funwithlinux.net/2014/04/join-ubuntu-14-04-to-active-directory-domain-using-realmd">work around</a> is to not let <code>realm</code> install the dependencies. To <code>/etc/realmd.conf</code> add:</p>

<p><code>
[service]
automatic-install = no
</code></p>

<p>Now you need to install the necessary packages yourself:</p>

<p><code>
sudo apt install samba-common-bin, samba-libs sssd-tools krb5-user adcli
</code></p>

<p>You will need to enter your kerberos domain (e.g. EXAMPLE.COM) during the install. You should be able to get a ticket and join the domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware CLI on Ubuntu Saucy Salamander]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2014/04/09/vmware-cli-on-ubuntu-saucy-salamander/"/>
    <updated>2014-04-09T10:51:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2014/04/09/vmware-cli-on-ubuntu-saucy-salamander</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.datanalyzers.com/VMware-Data-Recovery.jpg">The current project (as of this week) has me moving away from Openstack for a while. For the next couple of months I will be immersing myself in monitor, metrics and logging. Naturally, this being a shiney new environment, this involves a significant amount of VMware time.</p>

<!-- more -->


<p>I have inherited an Icinga install running on Ubuntu Server, so I will be needing to run CLI commands to create checks. Simply runnning the installer does not work, as the vmware-cli package is a mixture of 32 and 64 bit commands.</p>

<p>First you need to download the CLI from VMware. How to do that is an exercise for the reader, as I cannot be bothered to find the link (hint: it is not hard). Then you need to install a bunch of packages:</p>

<p><code>
sudo apt-get install cpanminus libdata-dump-perl libsoap-lite-perl libclass-methodmaker-perl  libxml-libxml-simple-perl libssl-dev libarchive-zip-perl libuuid-perl lib32z1 lib32ncurses5 lib32bz2-1.0
</code></p>

<p>This includes a bunch of Perl modules for munching through XML, plus some 32-bit libraries so that all the tools can work.</p>

<p>Finally, you can extract the tarball and install the CLI:</p>

<p><code>
tar xvf VMware-vSphere-CLI-5.5.0-1549297.x86_64.tar.gz
cd vmware-vsphere-cli-distrib/
sudo ./vmware-install.pl
</code></p>

<p>I have not tested it, but this will probably be the same process for Debian (at least Wheezy and Sid).</p>
]]></content>
  </entry>
  
</feed>
