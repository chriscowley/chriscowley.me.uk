<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Just Another Linux Blog]]></title>
  <link href="http://www.chriscowley.me.uk/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.chriscowley.me.uk/"/>
  <updated>2013-12-16T20:32:15+01:00</updated>
  <id>http://www.chriscowley.me.uk/</id>
  <author>
    <name><![CDATA[Chris Cowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating RHEL with Active Directory]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/12/16/integrating-rhel-with-active-directory/"/>
    <updated>2013-12-16T09:52:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/12/16/integrating-rhel-with-active-directory</id>
    <content type="html"><![CDATA[<p>I had a request on Reddit to share a document I wrote about connect Red Hat Enterprise Linux with Active Directory. The original document I wrote is confidential, but I said I would write it up.</p>

<p>This works for both Server 2008(R2) and 2012. If I recall correctly it will also work with 2003, but may need to minor terminology changes on the Windows side. From the Linux side, it should be fine with RHEL 6 and similar (CentOS and Scientific Linux). It should also apply to Fedora, but your mileage may vary.</p>

<!-- more -->


<p>So without further ado, let's dive in. To do this you need to know what is actually happening under the surface when you authenticate to AD from a client. The basic idea looks something like this:</p>

<p><img class="center" src="https://docs.google.com/drawings/d/1tjaacfXrTJtOZCREonoXzdHfgZQHssQ2zkDzFpLGeX0/pub?w=960&amp;h=720"></p>

<p>Integration with AD requires the installation of a few services in Red Hat, along with some minor modifications on the Windows Domain Controllers. On the Linux side, everything revolves around the System Security Services Daemon (SSSD). All communication between the PAM and the various possible back-ends is brokered through this daemon. This is only one solution, there are several. The others involve Winbind (which I have found problematic), or LDAP/Kerberos directly (no offline authentication, more difficult to set up). Note that this does not give you any file sharing, but  can easily be extended to do so using Samba.</p>

<p>PAM communicates with SSSD, which in turn talks to Active Directory via LDAP and Kerberos. Identification is performed via LDAP, with the user is authenticated using Kerberos. These different components have some prerequisites on Windows.</p>

<ul>
<li>DNS must be working fully - both forward and reverse lookups should be functional. If the Kerberos server (Windows Domain Controller) cannot identify the client via DNS, Kerberos will fail.</li>
<li>Accurate time is essential – if the two systems have too larger difference in time (about 5 minutes), Kerberos will fail.</li>
<li>The Active Directory needs to be extended to include the relevant information for *NIX systems (home directory, shell, UUID/GUID primarily).

<ul>
<li>They are actually there, but empty and uneditable. The necessary GUI fields are part of “Identity Management for UNIX”</li>
</ul>
</li>
<li>It must be possible for the Linux client to perform an LDAP search. This could be either via an anonymous bind or authenticated.

<ul>
<li>Anonymous is obviously not recommended.</li>
<li>Simple binds (username/password) do work but are not recommended. Although I am not one to practise what I preach (see below).</li>
<li>The best option is SASL/GSSAPI, using a keytab generated by Samba. This does not require Admin privileges on Windows, only permissions to join computers to the domain.</li>
</ul>
</li>
</ul>


<p>For both DNS and NTP I'm assuming that you are using the services provided by Active Directory. It is possible to break those out to other boxes, but it beyond my Windows Admin ability/desire to do so.</p>

<h1>Preparing Active Directory</h1>

<p>In Server Manager, add the Role Service "Identity Management for UNIX". This is under the Role "Active Directory Domain Services" (took me a while to find that). When it asks, use your AD domain name as the NIS name. For example, with a AD domain of <em>chriscowley.lab</em>, use <em>chriscowley</em>.</p>

<p>Once that is installed, create a pair of groups. For the sake of argument, lets call them <em>LinuxAdmin</em> and <em>LinuxUser</em>. The intended roles of these 2 groups is left as an exercise for the reader. When you create these groups, you will see a new tab in the properties window for both groups and users: "UNIX Attributes".</p>

<p>Now go ahead and create a user (or edit an existing one). Go into the UNIX tab and set the configure the user for UNIX access: <img class="right" src="http://i.imgur.com/Ox9kuAy.png"></p>

<ul>
<li>Select the NIS domain you created earlier</li>
<li>Set an approprate UUID (default should be fine)</li>
<li>Set the login shell as <code>/bin/bash</code>, <code>/bin/sh</code> should be fine most of the time, but I have seen a few odd things happen (details escape me)</li>
<li>Set the home directory. I seperate them out from local users to something like <code>/home/&lt;DOMAIN&gt;/&lt;username&gt;</code></li>
</ul>


<p>Open up one of your groups (let's start with LinuxAdmin) and add the user to that group. Note you have to do it 2 places (don't blame me, I am just the messenger). Both in the standard Groups tab, but also in the UNIX attributes tab.</p>

<p>That should be everything on the Windows side.</p>

<h1>Configure RHEL as a client</h1>

<p>Most of the heavy lifting is done by the <em>System Security Service Daemon</em> (SSSD).</p>

<p><code>
yum install sssd sssd-client krb5-workstation samba openldap-clients policycoreutils-python
</code></p>

<p>This should also pull in all the dependencies.</p>

<h2>Configure Kerberos</h2>

<p>I've already said, this but I will repeat myself as getting it wrong will cause many lost hours.</p>

<ul>
<li>DNS must be working for both forward and reverse lookups</li>
<li>Time must be in sync accross all the clients</li>
</ul>


<p>Make sure that /etc/resolv.conf contains your domain controllers.</p>

<p><strong>Gotcha</strong>: In RHEL/Fedora the DNS setting are defined in /etc/sysconfig/network-settings/ifcfg-eth0 (or whichever NIC comes first) by Anaconda. This will over-write /etc/resolv.conf on reboot. For no good reason other than stubbornness I tend to remove these entries and define resolv.conf myself (or via configuration management). Alternatively put DNS1 and DNS2 entries in the network configuration files.</p>

<p>In <code>/etc/ntp.conf</code> change you servers to point at your Domain Controllers.</p>

<p>```
[logging]
 default = FILE:/var/log/krb5libs.log</p>

<p>[libdefaults]
 default_realm = AD.EXAMPLE.COM
 dns_lookup_realm = true
 dns_lookup_kdc = true
 ticket_lifetime = 24h
 renew_lifetime = 7d
 rdns = false
 forwardable = yes</p>

<p>[realms]
 AD.EXAMPLE.COM = {
  # Define the server only if DNS lookups are not working</p>

<h1>kdc = server.ad.example.com</h1>

<h1>admin_server = server.ad.example.com</h1>

<p> }</p>

<p>[domain_realm]
 .ad.example.com = AD.EXAMPLE.COM
 ad.example.com = AD.EXAMPLE.COM
```</p>

<p>You should now be able to run:</p>

<p><code>
kinit aduser@AD.EXAMPLE.COM
</code></p>

<p>That should obtain a kerberos ticket (check with <code>klist</code>) and you can move on. If it does not work fix it now - Kerberos is horrible to debug later.</p>

<h2>Enable LDAP Searches</h2>

<p>The best way to bind to AD is using SASL/GSSAPI as no passwords are needed.</p>

<p><code>
kinit Administrator@AD.EXAMPLE.COM
net ads join createupn=host/client.ad.example.com@AD.EXAMPLE.COM –k
net ads keytab create   
net ads keytab add host/client.ad.example.com@AD.EXAMPLE.COM
</code></p>

<p>You should now be able to get information about yourself from AD using ldapsearch:
<code>
ldapsearch -H ldap://server.ad.example.com/ -Y GSSAPI -N -b "dc=ad,dc=example,dc=com" "(&amp;(objectClass=user)(sAMAccountName=aduser))"
</code></p>

<h2>Configure SSSD</h2>

<p>Everything in SSSD revolves around a single config file (/etc/sssd/ssd.conf).</p>

<p>```
[sssd]
 config_file_version = 2
 domains = ad.example.com
 services = nss, pam
 debug_level = 0</p>

<p>[nss]</p>

<p>[pam]</p>

<p>[domain/ad.example.com]
 id_provider = ldap
 auth_provider = krb5
 chpass_provider = krb5
 access_provider = ldap</p>

<p> # To use Kerberos, un comment the next line
 #ldap_sasl_mech = GSSAPI</p>

<p> # The following 3 lines bind to AD. Comment them out to use Kerberos
 ldap_default_bind_dn = CN=svc_unix,OU=useraccounts,DC=ad,DC=example,DC=com
 ldap_default_authtok_type = password
 ldap_default_authtok = Welcome_2014</p>

<p> ldap_schema = rfc2307bis</p>

<p> ldap_user_search_base = ,dc=ad,dc=example,dc=com
 ldap_user_object_class = user</p>

<p> ldap_user_home_directory = unixHomeDirectory
 ldap_user_principal = userPrincipalName</p>

<p> ldap_group_search_base = ou=groups,dc=ad,dc=example,dc=com
 ldap_group_object_class = group</p>

<p> ldap_access_order = expire
 ldap_account_expire_policy = ad
 ldap_force_upper_case_realm = true</p>

<p> krb5_realm = AD.EXAMPLE.COM
```</p>

<p>There is something wrong here. Note the lines:
```
 # To use Kerberos, un comment the next line
 #ldap_sasl_mech = GSSAPI</p>

<p> # The following 3 lines bind to AD. Comment them out to use Kerberos
 ldap_default_bind_dn = CN=svc_unix,OU=useraccounts,DC=ad,DC=example,DC=com
 ldap_default_authtok_type = password
 ldap_default_authtok = Welcome_2014
```</p>

<p>Instead of doing the SASL/GSSAPI bind I would prefer to do I have chickened out and done a simple bind. Why? Because I am weak... :-(</p>

<p>Try with kerberos first, if it works then awesome, if not then create a service account in AD that can do nothing other than perform a search and use that to perform the bind. Make sure its path matches that of the <em>ldap_default_bind_dn</em> path, also make sure the password is more complex than "Welcome_2014".</p>

<p>For now this does nothing, we need to tell PAM to use it. The easiest way to enable this on RHEL is to use the authconfig command:</p>

<p><code>
authconfig --enablesssd --enablesssdauth --enablemkhomedir –update
</code></p>

<p>This will update <code>/etc/nsswitch.conf</code> and various files in <code>/etc/pam.d</code> to tell the system to authenticate against SSSD. SSSD will in turn talk to Active Directory, using LDAP for Identification and Kerberos for authentication.
Finally you can enable your LinuxAdmin’s to use sudo. Run the command visudo and add the line:</p>

<p>```
%LinuxAdmin ALL=(ALL)       ALL</p>

<h1>note the % sign, the defines it as a group not a user</h1>

<p>```</p>

<p>Now your admin’s can run commands as root by prefacing them with sudo. For an encore, I would suggest disabling root login via SSH. Log in as your AD user (leave your root session open, just in case) and run:</p>

<p><code>
sudo sed -i 's/PermitRootLogin no/PermitRootLogin yes/' /etc/ssh/sshd_config
sudo service sshd reload
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect to Fedora 19 with FreeNX]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/08/01/connect-to-fedora-19-with-freenx/"/>
    <updated>2013-08-01T10:17:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/08/01/connect-to-fedora-19-with-freenx</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/Z8LFhPUl.png" width="400" height="250"> FreeNX is a great remote desktop protocol. I find it more responsive than VNC and it uses less bandwidth. The biggest advantage though (in my eyes) is that it uses SSH to do the authentication. With VNC, each user has to arrange another password to connect to their VNC session.</p>

<!-- more -->


<p>However, FreeNX is still not really working nicely with GNOME 3. If you use KDE you are fine, but I like GNOME and many of the programs are GTK as a result. This means that they look out of place on KDE, which causes my engineer OCD super-sensory powers to go mad.</p>

<p>My workaround is to effectively go back to the tried and tested Gnome 2 environment, nowadays know as MATE.</p>

<p>Get the server installed and configured along with the MATE desktop:</p>

<p><code>
sudo yum -y groupinstall "MATE desktop"
sudo yum -y install freenx-server
sudo /usr/libexec/nx/nxsetup --install --setup-nomachine-key
sudo chkconfig freenx-server on
</code></p>

<p>Now open <code>/etc/nxserver/node.conf</code> and un-comment the line that sets the <code>COMMAND_START_GNOME</code> variable. You need to edit this line to read:</p>

<p><code>
COMMAND_START_GNOME=mate-session
</code></p>

<p>and restart the server with <code>sudo service freenx-server restart</code></p>

<p>Now connect to it using the NX client and chose to use a unix-gnome desktop. Instead of firing up <code>gnome-session</code> (which will fail) it will now run <code>mate-session</code> and you are happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bamboo Invoice on Centos with Nginx]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/04/29/bamboo-invoice-on-centos-with-nginx/"/>
    <updated>2013-04-29T21:16:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/04/29/bamboo-invoice-on-centos-with-nginx</id>
    <content type="html"><![CDATA[<p><a href="http://www.bambooinvoice.org/">BambooInvoice</a> is free Open Source invoicing software intended for small businesses and independent contractors. It is easy to use and creates pretty good looking invoices.</p>

<!-- more -->


<p>It is a simple PHP application that is based on the CodeIgniter framework. This means it is really simple to install on a typically LAMP stack. I however use Nginx and could not find any notes on how to configure it. It is pretty typical you can get most of the way by reading any of the Nginx howto documents on the web. Personally, for PHP apps, I use PHP-FPM, so you could use <a href="http://www.howtoforge.com/installing-nginx-with-php5-and-php-fpm-and-mysql-support-on-centos-6.4">this on Howtoforge</a> to get most of the way. That will get you a working Nginx, PHP and MySQL system.</p>

<p>Download the install file from [http://bambooinvoice.org/] an unzip is in your www folder:</p>

<p><code>bash
cd /var/www
wget http://bambooinvoice.org/img/bambooinvoice_089.zip
unzip bambooinvoice_089.zip
</code></p>

<p>You next step is to create a database for it along with a user:</p>

<p><code>mysql
CREATE DATABASE bambooinvoice DEFAULT CHARACTER SET utf8;
GRANT ALL ON bambooinvoice.* TO 'bambooinvoice'@'localhost' IDENTIFIED BY 'bambooinvoice';
FLUSH PRIVILEGES;
exit
</code></p>

<p>Now you can edit the config files to point at the database:</p>

<p>```php /var/www/bambooinvoices/bamboo_system_files/application/config/database.php
&lt;?php  if (!defined('BASEPATH')) exit('No direct script access allowed');
$active_group = 'default';</p>

<p>$db['default']['hostname'] = 'localhost';
$db['default']['username'] = 'bambooinvoice';
$db['default']['password'] = 'bambooinvoice';
$db['default']['database'] = 'bambooinvoice';
$db['default']['dbdriver'] = 'mysql';
$db['default']['dbprefix'] = 'bamboo_';
$db['default']['active_r'] = TRUE;
$db['default']['pconnect'] = FALSE;
$db['default']['db_debug'] = TRUE;
$db['default']['cache_on'] = FALSE;
$db['default']['cachedir'] = '';
$db['default']['char_set'] = 'utf8';
$db['default']['dbcollat'] = 'utf8_general_ci';
?>
```</p>

<p>Next you need set the base_url in <code>/var/www/bambooinvoices/bamboo_system_files/application/config/config.php</code>. Nothing else is essential in that file, but read the docs in the ZIP file to see what else you want to change.</p>

<p>Now the all important bit.</p>

<p>```nginx /etc/nginx/conf.d/bamboo.conf
server {</p>

<pre><code>listen 80;
server_name bamboo.example;
root /var/www/bambooinvoice/;
index index.php index.html;
access_log              /var/log/nginx/bamboo_access.log;
error_log               /var/log/nginx/bamboo_error.log;

location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
}


# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
 }
 location / {
     try_files $uri $uri/ /index.php$request_uri /index.php;
 }


 location ~ \.php($|/) {
     try_files $uri =404;
     fastcgi_pass 127.0.0.1:9000;
     include /etc/nginx/fastcgi_params;
     fastcgi_index index.php;
     set $script $uri;
     set $path_info "";
     if ($uri ~ "^(.+\.php)(/.+)") {
         set $script $1;
         set $path_info $2;
     }
     fastcgi_param URI $uri;
     # Next two lines are fix the 502 (Bad gateway) error
     fastcgi_buffers 8 16k;
     fastcgi_buffer_size 32k;

     fastcgi_param PATH_INFO $path_info;
     fastcgi_param SCRIPT_NAME $script;
     fastcgi_param SCRIPT_FILENAME $document_root$script;
  }
</code></pre>

<p>}
```</p>

<p>At first glance, there is nothing out of the ordinary. This is pretty much what Howtoforge gives you. Look more closely and I have added the 3 lines 39-41. This solves a gateway problem I had when creating a client.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writeable TFTP Server On CentOS]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/03/25/writeable-tftp-server-on-centos/"/>
    <updated>2013-03-25T15:45:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/03/25/writeable-tftp-server-on-centos</id>
    <content type="html"><![CDATA[<p>Well this caught me out for an embarassingly long time. There are <a href="http://blog.penumbra.be/tag/tftp/">loads</a> <a href="http://www.question-defense.com/2008/11/13/linux-setup-tftp-server-on-centos">of</a> <a href="http://wiki.centos.org/EdHeron/PXESetup">examples</a> of setting up a TFTP server on the web. The vast majority of them assume that you are using them read-only for PXE booting.</p>

<!-- more -->


<p>I needed to make it writeable so that it could be used for storing switch/router backups. It is trivially simple once you have read the man page (pro tip: RTFM).</p>

<p>I am doing this on RHEL6, it should be fine on Centos, Scientific Linux or Fedora as is. Any other distro it will require some modification. First install it (install the client as well to test at the end:</p>

<p><code>
yum install tftp tftp-server xinetd
chkconfig xinetd on
</code></p>

<p>Now edit the file `/etc/xinetd.d/tftp to read:</p>

<p>```
service tftp
{</p>

<pre><code>socket_type = dgram
protocol    = udp
wait        = yes
user        = root
server      = /usr/sbin/in.tftpd
server_args = -c -s /var/lib/tftpboot
disable     = no
per_source  = 11
cps         = 100 2
flags       = IPv4
</code></pre>

<p>}
```</p>

<p>There are 2 changes to this file from the defaults. The <code>disable</code> line enables the service. Normally that is where you leave it. However, you cannot upload to the server in this case without pre-creating the files.</p>

<p>The second change adds a <code>-c</code> flag to the <code>server_args</code> line. This tells the service to create the files as necessary.</p>

<p>It still will not work though. You need to tweak the filesystem permissions and SELinux:</p>

<p><code>
chmod 777 /var/lib/tftpboot
setsebool -P tftp_anon_write 1
</code></p>

<p>Of course you'll also need to open up the firewall. So add the following line to <code>/etc/sysconfig/iptables</code>:</p>

<p><code>
-A INPUT -m state --state NEW -m udp -p udp -m udp --dport 69 -j ACCEPT
</code></p>

<p>If your IPtables set up is what comes out of the box, there will be a similar line to allow SSH access (tcp:22), I would add this line just after that one. If you have something more complicated, then you will probably know how to add this one as well anyway.</p>

<p>You should now be able to upload something to the server</p>

<p><code>
echo "stuff" &gt; test
tftp localhost -c put test
</code></p>

<p>Your test file should now be in <code>var/lib/tftpboot</code>.</p>

<p>One final note with regards to VMware. This does not work if you are using the VMXNET3 adapter, so make sure you are using the E1000. GETs will work and the file will be created, but no data will be put on the server. To annoy you even more, the test PUTting to localhost will work, but PUTs from a remote host will not.</p>

<p>It has been noted in the VMware forums <a href="http://communities.vmware.com/thread/215456">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In praise of old school UNIX]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix/"/>
    <updated>2013-02-05T16:13:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix</id>
    <content type="html"><![CDATA[<p>What am I doing today? Documentation that is what. I am writing a document on how to do <a href="http://www.chriscowley.me.uk/blog/2012/11/19/sftp-chroot-on-centos/">this</a>. To any Linux user it is a very simple process and I could just give them a link to my own website.</p>

<!--more-->


<p>I am not writing this for a techinical audience though. The people who are going to perform this work will be the 'Level 1 operatives'. This translates roughly to "anyone we can find on the street corners of some Far East city". If I tell them to press the red button labelled "press me" and it turns out to be orange, they will stop. I cannot assume the ability to edit a file in Vi. How can you work around this, well you need to make everything a copy and paste operation. This is easily done in Bash thanks to IO redirection and of course Sed.</p>

<p>Now, a brief recap may be in order, as there are some perfectly knowledgable Linux users who do not know what Sed is. Really, one of them sits behind me. Sed stands for Stream EDitor, and it parses text and applies transformations to it. It was one of the first UNIX utilities. It kind of sits between <a href="https://en.wikipedia.org/wiki/Grep">Grep</a> and <a href="https://en.wikipedia.org/wiki/AWK_programming_language">Awk</a> and is <a href="http://uuner.doslash.org/forfun/">surprisingly powerful</a>.</p>

<p>Anyway, I need to edit a line in a file then add a block of code at the end.</p>

<p>```
cp -v /etc/ssh/sshd_config{,.dist}
sed -i ''/<sup>Subsystem/s#/usr/libexec/openssh/sftp-server#internal-sftp#g'</sup> \</p>

<pre><code>/etc/ssh/sshd_config
</code></pre>

<p>```</p>

<p>First line obviously is a contracted cp line which puts the suffix <em>.dist</em> on the copy.</p>

<p>The basic idea is that it runs through the file (/etc/ssh/sshd_config) and looks for any line that starts with "Subsystem" (<code>/^Subsystem/</code>). If it finds a line that matches it then will perform a "substituion" (<code>/s#</code>). The next 2 blocks tell it what the substitution will be in the order "#From#To#". The reason for  the change from <code>/</code> to <code>#</code> is because of the / in the path name (thanks to <a href="http://www.reddit.com/user/z0nk">Z0nk</a>  for reminding me that you can use arbitary seperators). The "#g" tells Sed to perform the substituion on every instance it finds on the line, rather than just the first one. It is completely superfluous in this example, but I tend to put it in from force of habit. Finally the "-i" tells Sed to perform the edit in place, rather than outputing to Stdout.</p>

<p>The next bit is a bit cleverer. With a single command I want to add a block of text to the file.</p>

<p>```
cat &lt;<EOF | while read inrec; do echo $inrec >> /etc/ssh/sshd_config; done
Match Group transfer
ChrootDirectory /var/local/
ForceCommmand internal-sftp
X11Forwarding no
AllowTcpForwarding no</p>

<p>EOF
```</p>

<p>Here <code>cat &lt;&lt;EOF</code> tells it send everything you type to Stdout until it sees the string EOF. This then gets piped to a <code>while</code> loop that appends each line of that Stdout to the file we want to extend (<em>/etc/ssh/sshd_config</em> in this case).</p>

<p>Using these old tools and a bit of knowledge of how redirection works has enabled me to make a document that anyone who can copy/paste can follow. It is very easy for technical people to forget that not everyone has the knowledge we have. To us opening Vi is perfectly obvious, but to others maybe it isn't and they are not being paid enough to know. They are just being paid to follow a script. I may not like it, but it is the case - it also helped turn a boring documentation session into something a little more interesting. Which is nice!</p>
]]></content>
  </entry>
  
</feed>
