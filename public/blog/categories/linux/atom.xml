<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Just Another Linux Blog]]></title>
  <link href="http://www.chriscowley.me.uk/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.chriscowley.me.uk/"/>
  <updated>2013-03-25T13:26:20+01:00</updated>
  <id>http://www.chriscowley.me.uk/</id>
  <author>
    <name><![CDATA[Chris Cowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[In praise of old school UNIX]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix/"/>
    <updated>2013-02-05T16:13:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/02/05/in-praise-of-old-school-unix</id>
    <content type="html"><![CDATA[<p>What am I doing today? Documentation that is what. I am writing a document on how to do <a href="http://www.chriscowley.me.uk/blog/2012/11/19/sftp-chroot-on-centos/">this</a>. To any Linux user it is a very simple process and I could just give them a link to my own website.</p>

<!--more-->


<p>I am not writing this for a techinical audience though. The people who are going to perform this work will be the 'Level 1 operatives'. This translates roughly to "anyone we can find on the street corners of some Far East city". If I tell them to press the red button labelled "press me" and it turns out to be orange, they will stop. I cannot assume the ability to edit a file in Vi. How can you work around this, well you need to make everything a copy and paste operation. This is easily done in Bash thanks to IO redirection and of course Sed.</p>

<p>Now, a brief recap may be in order, as there are some perfectly knowledgable Linux users who do not know what Sed is. Really, one of them sits behind me. Sed stands for Stream EDitor, and it parses text and applies transformations to it. It was one of the first UNIX utilities. It kind of sits between <a href="https://en.wikipedia.org/wiki/Grep">Grep</a> and <a href="https://en.wikipedia.org/wiki/AWK_programming_language">Awk</a> and is <a href="http://uuner.doslash.org/forfun/">surprisingly powerful</a>.</p>

<p>Anyway, I need to edit a line in a file then add a block of code at the end.</p>

<p>```
cp -v /etc/ssh/sshd_config{,.dist}
sed -i ''/<sup>Subsystem/s#/usr/libexec/openssh/sftp-server#internal-sftp#g'</sup> \</p>

<pre><code>/etc/ssh/sshd_config
</code></pre>

<p>```</p>

<p>First line obviously is a contracted cp line which puts the suffix <em>.dist</em> on the copy.</p>

<p>The basic idea is that it runs through the file (/etc/ssh/sshd_config) and looks for any line that starts with "Subsystem" (<code>/^Subsystem/</code>). If it finds a line that matches it then will perform a "substituion" (<code>/s#</code>). The next 2 blocks tell it what the substitution will be in the order "#From#To#". The reason for  the change from <code>/</code> to <code>#</code> is because of the / in the path name (thanks to <a href="http://www.reddit.com/user/z0nk">Z0nk</a>  for reminding me that you can use arbitary seperators). The "#g" tells Sed to perform the substituion on every instance it finds on the line, rather than just the first one. It is completely superfluous in this example, but I tend to put it in from force of habit. Finally the "-i" tells Sed to perform the edit in place, rather than outputing to Stdout.</p>

<p>The next bit is a bit cleverer. With a single command I want to add a block of text to the file.</p>

<p>```
cat &lt;<EOF | while read inrec; do echo $inrec >> /etc/ssh/sshd_config; done
Match Group transfer
ChrootDirectory /var/local/
ForceCommmand internal-sftp
X11Forwarding no
AllowTcpForwarding no</p>

<p>EOF
```</p>

<p>Here <code>cat &lt;&lt;EOF</code> tells it send everything you type to Stdout until it sees the string EOF. This then gets piped to a <code>while</code> loop that appends each line of that Stdout to the file we want to extend (<em>/etc/ssh/sshd_config</em> in this case).</p>

<p>Using these old tools and a bit of knowledge of how redirection works has enabled me to make a document that anyone who can copy/paste can follow. It is very easy for technical people to forget that not everyone has the knowledge we have. To us opening Vi is perfectly obvious, but to others maybe it isn't and they are not being paid enough to know. They are just being paid to follow a script. I may not like it, but it is the case - it also helped turn a boring documentation session into something a little more interesting. Which is nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trac with Nginx on Centos]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/01/21/trac-with-nginx-on-centos/"/>
    <updated>2013-01-21T11:53:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/01/21/trac-with-nginx-on-centos</id>
    <content type="html"><![CDATA[<p><a href="tac.edgewall.org">Trac</a> is an excellent online project management tool. Nginx us a great web server. Surely the combination of the two should be a match made in heaven. I would say so, although there are a couple problems. The easiest way to deploy Trac is on Apache using mod_wsgi or FastCGI. This option does not really exist for Nginx. Okay, it can do FastCGI, but I have not get that set up on my server.</p>

<!-- more -->


<p>What Nginx does do extremely well is Proxy stuff. Use this with Trac's built in web server (tracd) and you have  a very nice little set up. Ruby people, before you get all upset, Trac's server is not just for dev (a la WEBrick). It is fine for production use.</p>

<p>The first thing to do (obviously) is to install Trac. I get it from Pip, although a slightly older version is in <a href="http://fedoraproject.org/wiki/EPEL">EPEL</a> if you prefer to stick with native packages.</p>

<p><code>
sudo yum install python-setuptools
sudo pip install Trac
sudo useradd -r -d /var/local/trac trac
sudo -u trac trac-admin /var/local/trac/trac.example.com initenv
sudo -u trac htpasswd -c /var/local/trac/.htpasswd example-realm chris
</code></p>

<p>Answer the little question it asks you - this includes the VCS you want to use, but that is for another day. I use the TracGit plugin to link to my Git repos.</p>

<p>Create an init script (<code>/etc/init.d/trac</code>) that contains something like:</p>

<p><div><script src='https://gist.github.com/4586539.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Start up the Trac daemon and enable it on boot up</p>

<p><code>
sudo chmod +x /etc/init.d/trac
sudo chkconfig trac on
sudo /etc/init.d/trac start
</code></p>

<p>Open it up and have a look at least. You will probably want to modify it to use your authentication realm.</p>

<p>Now you need to configure Nginx. I use the package from <a href="http://fedoraproject.org/wiki/EPEL">EPEL</a>. Enable that if you have not already and run</p>

<p><code>
sudo yum install nginx
</code></p>

<p>Create the file <code>/etc/nginx/conf.d/trac.conf</code> containing something like:</p>

<p><div><script src='https://gist.github.com/4586630.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Finally enable Nginx on boot up and start it:</p>

<p><code>
sudo chkconfig nginx on
sudo server nginx start
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writeable TFTP Server On Centos]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2013/01/21/writeable-tftp-server-on-centos/"/>
    <updated>2013-01-21T10:39:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2013/01/21/writeable-tftp-server-on-centos</id>
    <content type="html"><![CDATA[<p>Well this caught me out for an embarassingly long time. There are <a href="http://blog.penumbra.be/tag/tftp/">loads</a> <a href="http://www.question-defense.com/2008/11/13/linux-setup-tftp-server-on-centos">of</a> <a href="http://wiki.centos.org/EdHeron/PXESetup">examples</a> of setting up a TFTP server on the web. The vast majority of them assume that you are using them read-only for PXE booting.</p>

<p>I needed to make it writeable so that it could be used for storing switch/router backups. It is trivially simple once you have read the man page (pro tip: RTFM).</p>

<p>I am doing this on RHEL6, it should be fine on Centos, Scientific Linux or Fedora as is. Any other distro it will require some modification. First install it (install the client as well to test at the end:</p>

<p><code>
yum install tftp tftp-server xinetd
chkconfig xinetd on
</code></p>

<p>Now edit the file `/etc/xinetd.d/tftp to read:</p>

<p>```
service tftp
{</p>

<pre><code>socket_type = dgram
protocol    = udp
wait        = yes
user        = root
server      = /usr/sbin/in.tftpd
server_args = -c -s /var/lib/tftpboot
disable     = no
per_source  = 11
cps         = 100 2
flags       = IPv4
</code></pre>

<p>}
```</p>

<p>There are 2 changes to this file from the defaults. The <code>disable</code> line enables the service. Normally that is where you leave it. However, you cannot upload to the server in this case without pre-creating the files.</p>

<p>The second change adds a <code>-c</code> flag to the <code>server_args</code> line. This tells the service to create the files as necessary.</p>

<p>It still will not work though. You need to tweak the filesystem permissions and SELinux:</p>

<p><code>
chmod 777 /var/lib/tftpboot
setsebool -P tftp_anon_write 1
</code></p>

<p>Of course you'll also need to open up the firewall. So add the following line to <code>/etc/sysconfig/iptables</code>:</p>

<p><code>
-A INPUT -m state --state NEW -m udp -p udp -m udp --dport 69 -j ACCEPT
</code></p>

<p>If your IPtables set up is what comes out of the box, there will be a similar line to allow SSH access (tcp:22), I would add this line just after that one. If you have something more complicated, then you will probably know how to add this one as well anyway.</p>

<p>You should now be able to upload something to the server</p>

<p><code>
echo "stuff" &gt; test
tftp localhost -c put test
</code></p>

<p>Your test file should now be in <code>var/lib/tftpboot</code>.</p>

<p>One final note with regards to VMware. This does not work if you are using the VMXNET3 adapter, so make sure you are using the E1000. GETs will work and the file will be created, but no data will be put on the server. To annoy you even more, the test PUTting to localhost will work, but PUTs from a remote host will not.</p>

<p>It has been noted in the VMware forums <a href="http://communities.vmware.com/thread/215456">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFTP Chroot on CentOS]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2012/11/19/sftp-chroot-on-centos/"/>
    <updated>2012-11-19T19:59:00+01:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2012/11/19/sftp-chroot-on-centos</id>
    <content type="html"><![CDATA[<p>This came up today where I needed to give secure file transfer to customers. To complicate things I had to use an out-of-the-box RHEL6 system. The obvious answer was to use SSH and limit those users to SFTP only. Locking them into a chroot was not a requirement, but it seemed like a good idea to me. I found plenty of docs that got 80% of the way, or took a shortcut, but this should be complete.</p>

<!-- more -->


<p>The basic steps are:</p>

<ol>
<li>Create a group and the users to that group</li>
<li>Modify the SSH daemon configuration to limit a group to sftp only</li>
<li>Setup file system permissions</li>
<li>Configure SELinux</li>
<li>Test (of course)</li>
</ol>


<p>Without further ado, lets get started. It should only take about 10 minutes, nothing here is especially complex.</p>

<p>Create a group that is limited to SFTP only and a user to be in that group.</p>

<p><code>
groupadd sftponly
useradd sftptest
usermod -aG sftponly  sftptest
</code></p>

<p>Now you need to make a little change to <code>/etc/ssh/sshd_config</code>. There will be a <em>Subsystem</em> line for <code>sftp</code> which you need to change to read:</p>

<p><code>
Subsystem       sftp    internal-sftp
</code></p>

<p>Now you need to create a block at the end to limit members of a group (ie the sftponly group you created above) and chroot them. Simply add the following to the end of the file:</p>

<p>```
Match Group sftponly</p>

<pre><code>ChrootDirectory %h
ForceCommand internal-sftp
X11Forwarding no
AllowTcpForwarding no
</code></pre>

<p>```</p>

<p>These changes will require a reload of the SSH daemon: <code>service sshd reload</code></p>

<p>Now you need to make some file permission changes. For some reason which I cannot work out for now, the home directory must be owned by root and have the permissions 755. So we will also need to make a folder in the home directory to upload to and make that owned by the user.</p>

<p><code>
sudo -u sftptest mkdir -pv /home/sftptest/upload
chown root. /home/sftptest
chmod 755 /home/sftptest
chgrp -R sftponly /home/sftptest
</code></p>

<p>The last thing we need to do is tell SELinux that we want to upload files via SFTP to a chroot as it is read-only by default. Of course you are running SELinux in enforcing mode aren't you :)</p>

<p><code>
setsebool -P ssh_chroot_rw_homedirs on
</code></p>

<p>Now from another console you can sftp to your server</p>

<p><code>
sftp sftptest@&lt;server&gt;
</code></p>

<p>You should then be able to put a file in your upload folder. However if you try to ssh to the server as the user <em>sftptest</em> it should tell you to go away. Of course you should be able to <em>ssh</em> as your normal user with no problem. Pro tip: make sure to leave a root terminal open just in case.</p>

<p>Required reading:</p>

<ul>
<li><a href="http://wiki.centos.org/HowTos/SELinux">CentOS Wiki SELinux</a></li>
<li><a href="http://wiki.centos.org/TipsAndTricks/SelinuxBooleans">CentOS Wiki SELinuxBooleans</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I have a Raspberry Pi]]></title>
    <link href="http://www.chriscowley.me.uk/blog/2012/08/04/i-have-a-raspberry-pi/"/>
    <updated>2012-08-04T21:47:00+02:00</updated>
    <id>http://www.chriscowley.me.uk/blog/2012/08/04/i-have-a-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Just got my new toy! I have to admit that I am not completely certain what I will do with it yet though.</p>

<!-- more -->


<p>It will certainly start by running <a href="http://mpd.wikia.com/wiki/Music_Player_Daemon_Wiki" target="_blank">Music Player Daemon</a>.</p>

<p><a href="http://www.flickr.com/photos/chriscowleyunix/7705281518/" title="Raspberry Pi by chriscowleysound, on Flickr"><img src="http://farm9.staticflickr.com/8023/7705281518_73c2ee8c18.jpg" width="500" height="375" alt="Raspberry Pi"></a></p>
]]></content>
  </entry>
  
</feed>
